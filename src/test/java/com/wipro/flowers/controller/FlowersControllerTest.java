package com.wipro.flowers.controller;import com.fasterxml.jackson.databind.ObjectMapper;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.wipro.flowers.model.FlowersDTO;import com.wipro.flowers.service.impl.FlowersServiceImpl;import com.wipro.flowers.utils.CommanUtils;import org.junit.jupiter.api.Test;import org.mockito.Mockito;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.ResultMatcher;import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.lang.reflect.Type;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.is;import static org.hamcrest.Matchers.notNullValue;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@WebMvcTest(FlowersController.class)public class FlowersControllerTest {    @Autowired    MockMvc mockMvc;    @MockBean    FlowersServiceImpl flowersServiceImpl;    @Autowired    ObjectMapper mapper;    String INPUT_RECORD = "[  {    \"userId\": 1,    \"id\": 1,    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"  },  {    \"userId\": 1,    \"id\": 2,    \"title\": \"qui est esse\",    \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"  }]";    @Test    public void countUser_Test() throws Exception {        FlowersDTO flowersOutput = FlowersDTO.builder()                .id(1)                .userId(1)                .body("quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem")                .title("sunt aut facere repellat provident occaecati excepturi optio reprehenderit")                .build();        List<FlowersDTO> records = new ArrayList<>(Arrays.asList(flowersOutput));        List<FlowersDTO> flowerList = CommanUtils.convertStringToObject(INPUT_RECORD);        Mockito.when(flowersServiceImpl.countUniqueUser(flowerList)).thenReturn(records);        MockHttpServletRequestBuilder mockRequest = MockMvcRequestBuilders.post("/flowers/count")                .contentType(MediaType.APPLICATION_JSON)                .accept(MediaType.APPLICATION_JSON)                .content(this.mapper.writeValueAsString(flowerList));        mockMvc.perform(mockRequest)                .andExpect(status().isOk())                .andExpect(jsonPath("$", notNullValue()));    }    @Test    public void updateUser_Test() throws Exception {        FlowersDTO flowersOutput = FlowersDTO.builder()                .id(1)                .userId(1)                .body("quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem")                .title("sunt aut facere repellat provident occaecati excepturi optio reprehenderit")                .build();        List<FlowersDTO> records = new ArrayList<>(Arrays.asList(flowersOutput));        List<FlowersDTO> flowerList = CommanUtils.convertStringToObject(INPUT_RECORD);        Mockito.when(flowersServiceImpl.countUniqueUser(flowerList)).thenReturn(records);        MockHttpServletRequestBuilder mockRequest = MockMvcRequestBuilders.post("/flowers/update")                .contentType(MediaType.APPLICATION_JSON)                .accept(MediaType.APPLICATION_JSON)                .content(this.mapper.writeValueAsString(flowerList));        mockMvc.perform(mockRequest)                .andExpect(status().isOk())                .andExpect(jsonPath("$", notNullValue()));    }}