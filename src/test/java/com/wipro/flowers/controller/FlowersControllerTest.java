package com.wipro.flowers.controller;import com.fasterxml.jackson.databind.ObjectMapper;import com.wipro.flowers.model.FlowersDTO;import com.wipro.flowers.model.UpdateResponseDTO;import com.wipro.flowers.model.UpdateUserDTO;import com.wipro.flowers.model.UserCountDTO;import com.wipro.flowers.service.impl.FlowersServiceImpl;import com.wipro.flowers.utils.CommonUtils;import org.hamcrest.Matchers;import org.junit.jupiter.api.Test;import org.mockito.Mockito;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.ResultMatcher;import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.is;import static org.hamcrest.Matchers.*;import static org.mockito.ArgumentMatchers.any;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@WebMvcTest(FlowersController.class)class FlowersControllerTest {    @Autowired    MockMvc mockMvc;    @MockBean    FlowersServiceImpl flowersServiceImpl;    @Autowired    ObjectMapper mapper;    @Test    void countUser_Test() throws Exception {        UserCountDTO userCountDTO = UserCountDTO.builder()                .userCount(10L)                .build();        Mockito.when(flowersServiceImpl.countUniqueUser(any())).thenReturn(userCountDTO);        mockMvc.perform(MockMvcRequestBuilders                        .get("/flowers/count")                        .contentType(MediaType.APPLICATION_JSON))                .andExpect(status().isOk())                .andExpect(jsonPath("$", aMapWithSize(1)))                .andExpect(jsonPath("$", notNullValue()))                .andExpect(jsonPath("$", Matchers.hasKey("userCount")))                .andExpect(jsonPath("$", Matchers.hasValue(10)));    }    @Test    void updateUser_Test() throws Exception {        FlowersDTO flowersOutput_1 = new FlowersDTO(1, 1, "qui est esse", "sunt aut facere repellat provident occaecati excepturi optio reprehenderit");        FlowersDTO flowersOutput_2 = new FlowersDTO(1, 1, "qui est esse", "sunt aut facere repellat provident occaecati excepturi optio reprehenderit");        FlowersDTO flowersOutput_3 = new FlowersDTO(1, 1, "qui est esse", "sunt aut facere repellat provident occaecati excepturi optio reprehenderit");        FlowersDTO flowersOutput_4 = new FlowersDTO(1, 1, "1800Flowers", "1800Flowers");        List<FlowersDTO> records = new ArrayList<>(Arrays.asList(flowersOutput_1, flowersOutput_2, flowersOutput_3, flowersOutput_4));        UpdateResponseDTO updateResponseDTO = UpdateResponseDTO.builder().status(200).data(records).build();        Mockito.when(flowersServiceImpl.updateUser(any(), any())).thenReturn(updateResponseDTO);        UpdateUserDTO updateUserDTO = UpdateUserDTO.builder().position(1).body("Wipro").title("wipro").build();        MockHttpServletRequestBuilder mockRequest = MockMvcRequestBuilders.post("/flowers/update")                .contentType(MediaType.APPLICATION_JSON)                .accept(MediaType.APPLICATION_JSON)                .content(this.mapper.writeValueAsString(updateUserDTO));        mockMvc.perform(mockRequest)                .andExpect(status().isOk())                .andExpect(jsonPath("$.data.[3].body").value("1800Flowers"))                .andExpect(jsonPath("$.data.[3].title").value("1800Flowers"));    }}